// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package raftpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// GrantVoteRequest is used by a node when it is a candidate to
// request vote from other nodes in the cluster during election
type GrantVoteRequest struct {
	SenderInfo           *NodeInfo        `protobuf:"bytes,1,opt,name=sender_info,json=senderInfo,proto3" json:"sender_info,omitempty"`
	LastEntryMetadata    *OpEntryMetadata `protobuf:"bytes,2,opt,name=last_entry_metadata,json=lastEntryMetadata,proto3" json:"last_entry_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GrantVoteRequest) Reset()         { *m = GrantVoteRequest{} }
func (m *GrantVoteRequest) String() string { return proto.CompactTextString(m) }
func (*GrantVoteRequest) ProtoMessage()    {}
func (*GrantVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

func (m *GrantVoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrantVoteRequest.Unmarshal(m, b)
}
func (m *GrantVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrantVoteRequest.Marshal(b, m, deterministic)
}
func (m *GrantVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrantVoteRequest.Merge(m, src)
}
func (m *GrantVoteRequest) XXX_Size() int {
	return xxx_messageInfo_GrantVoteRequest.Size(m)
}
func (m *GrantVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GrantVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GrantVoteRequest proto.InternalMessageInfo

func (m *GrantVoteRequest) GetSenderInfo() *NodeInfo {
	if m != nil {
		return m.SenderInfo
	}
	return nil
}

func (m *GrantVoteRequest) GetLastEntryMetadata() *OpEntryMetadata {
	if m != nil {
		return m.LastEntryMetadata
	}
	return nil
}

// GrantVoteReply is used by a node in response to GrantVoteRequest
// to indicate if a vote is granted to a requester.
type GrantVoteReply struct {
	SenderInfo           *NodeInfo `protobuf:"bytes,1,opt,name=sender_info,json=senderInfo,proto3" json:"sender_info,omitempty"`
	VoteGranted          bool      `protobuf:"varint,2,opt,name=vote_granted,json=voteGranted,proto3" json:"vote_granted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GrantVoteReply) Reset()         { *m = GrantVoteReply{} }
func (m *GrantVoteReply) String() string { return proto.CompactTextString(m) }
func (*GrantVoteReply) ProtoMessage()    {}
func (*GrantVoteReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

func (m *GrantVoteReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrantVoteReply.Unmarshal(m, b)
}
func (m *GrantVoteReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrantVoteReply.Marshal(b, m, deterministic)
}
func (m *GrantVoteReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrantVoteReply.Merge(m, src)
}
func (m *GrantVoteReply) XXX_Size() int {
	return xxx_messageInfo_GrantVoteReply.Size(m)
}
func (m *GrantVoteReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GrantVoteReply.DiscardUnknown(m)
}

var xxx_messageInfo_GrantVoteReply proto.InternalMessageInfo

func (m *GrantVoteReply) GetSenderInfo() *NodeInfo {
	if m != nil {
		return m.SenderInfo
	}
	return nil
}

func (m *GrantVoteReply) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

// AppendEntryRequest is used by a node to replicate an OpEntry
// to other cluster nodes. It should be used by leader.
type AppendEntryRequest struct {
	SenderInfo           *NodeInfo        `protobuf:"bytes,1,opt,name=sender_info,json=senderInfo,proto3" json:"sender_info,omitempty"`
	CurEntry             *OpEntry         `protobuf:"bytes,2,opt,name=cur_entry,json=curEntry,proto3" json:"cur_entry,omitempty"`
	PrevTermId           uint64           `protobuf:"varint,3,opt,name=prev_term_id,json=prevTermId,proto3" json:"prev_term_id,omitempty"`
	CurEntryMetadata     *OpEntryMetadata `protobuf:"bytes,4,opt,name=cur_entry_metadata,json=curEntryMetadata,proto3" json:"cur_entry_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AppendEntryRequest) Reset()         { *m = AppendEntryRequest{} }
func (m *AppendEntryRequest) String() string { return proto.CompactTextString(m) }
func (*AppendEntryRequest) ProtoMessage()    {}
func (*AppendEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{2}
}

func (m *AppendEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntryRequest.Unmarshal(m, b)
}
func (m *AppendEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntryRequest.Marshal(b, m, deterministic)
}
func (m *AppendEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntryRequest.Merge(m, src)
}
func (m *AppendEntryRequest) XXX_Size() int {
	return xxx_messageInfo_AppendEntryRequest.Size(m)
}
func (m *AppendEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntryRequest proto.InternalMessageInfo

func (m *AppendEntryRequest) GetSenderInfo() *NodeInfo {
	if m != nil {
		return m.SenderInfo
	}
	return nil
}

func (m *AppendEntryRequest) GetCurEntry() *OpEntry {
	if m != nil {
		return m.CurEntry
	}
	return nil
}

func (m *AppendEntryRequest) GetPrevTermId() uint64 {
	if m != nil {
		return m.PrevTermId
	}
	return 0
}

func (m *AppendEntryRequest) GetCurEntryMetadata() *OpEntryMetadata {
	if m != nil {
		return m.CurEntryMetadata
	}
	return nil
}

// AppendEntryReply is used by a node in response to AppendEntryRequest
// to indicate if replication of the entry is successful.
type AppendEntryReply struct {
	SenderInfo           *NodeInfo `protobuf:"bytes,1,opt,name=sender_info,json=senderInfo,proto3" json:"sender_info,omitempty"`
	Appended             bool      `protobuf:"varint,2,opt,name=appended,proto3" json:"appended,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AppendEntryReply) Reset()         { *m = AppendEntryReply{} }
func (m *AppendEntryReply) String() string { return proto.CompactTextString(m) }
func (*AppendEntryReply) ProtoMessage()    {}
func (*AppendEntryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{3}
}

func (m *AppendEntryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntryReply.Unmarshal(m, b)
}
func (m *AppendEntryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntryReply.Marshal(b, m, deterministic)
}
func (m *AppendEntryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntryReply.Merge(m, src)
}
func (m *AppendEntryReply) XXX_Size() int {
	return xxx_messageInfo_AppendEntryReply.Size(m)
}
func (m *AppendEntryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntryReply.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntryReply proto.InternalMessageInfo

func (m *AppendEntryReply) GetSenderInfo() *NodeInfo {
	if m != nil {
		return m.SenderInfo
	}
	return nil
}

func (m *AppendEntryReply) GetAppended() bool {
	if m != nil {
		return m.Appended
	}
	return false
}

// HeartbeatRequest is used by a node to establish its authority
// as the leader in the cluster. It is also used to send the commit
// index to other nodes so that they can build a snapshot.
type HeartbeatRequest struct {
	SenderInfo           *NodeInfo `protobuf:"bytes,1,opt,name=sender_info,json=senderInfo,proto3" json:"sender_info,omitempty"`
	LatestCommitIndex    uint64    `protobuf:"varint,2,opt,name=latest_commit_index,json=latestCommitIndex,proto3" json:"latest_commit_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{4}
}

func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatRequest.Unmarshal(m, b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
}
func (m *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(m, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return xxx_messageInfo_HeartbeatRequest.Size(m)
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

func (m *HeartbeatRequest) GetSenderInfo() *NodeInfo {
	if m != nil {
		return m.SenderInfo
	}
	return nil
}

func (m *HeartbeatRequest) GetLatestCommitIndex() uint64 {
	if m != nil {
		return m.LatestCommitIndex
	}
	return 0
}

// HeartbeatReply is used by a node in reply to HeartbeatRequest.
// It just contains sender info containing nodeID and termID.
type HeartbeatReply struct {
	SenderInfo           *NodeInfo `protobuf:"bytes,1,opt,name=sender_info,json=senderInfo,proto3" json:"sender_info,omitempty"`
	AcceptAsLeader       bool      `protobuf:"varint,2,opt,name=accept_as_leader,json=acceptAsLeader,proto3" json:"accept_as_leader,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HeartbeatReply) Reset()         { *m = HeartbeatReply{} }
func (m *HeartbeatReply) String() string { return proto.CompactTextString(m) }
func (*HeartbeatReply) ProtoMessage()    {}
func (*HeartbeatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{5}
}

func (m *HeartbeatReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatReply.Unmarshal(m, b)
}
func (m *HeartbeatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatReply.Marshal(b, m, deterministic)
}
func (m *HeartbeatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatReply.Merge(m, src)
}
func (m *HeartbeatReply) XXX_Size() int {
	return xxx_messageInfo_HeartbeatReply.Size(m)
}
func (m *HeartbeatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatReply.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatReply proto.InternalMessageInfo

func (m *HeartbeatReply) GetSenderInfo() *NodeInfo {
	if m != nil {
		return m.SenderInfo
	}
	return nil
}

func (m *HeartbeatReply) GetAcceptAsLeader() bool {
	if m != nil {
		return m.AcceptAsLeader
	}
	return false
}

// SnapshotData is a piece of snapshot data containing either
// key-value pair or the snapshot related metadata to update
// state-machine metadata.
type SnapshotData struct {
	// Types that are valid to be assigned to Data:
	//	*SnapshotData_KvData
	//	*SnapshotData_Metadata
	Data                 isSnapshotData_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SnapshotData) Reset()         { *m = SnapshotData{} }
func (m *SnapshotData) String() string { return proto.CompactTextString(m) }
func (*SnapshotData) ProtoMessage()    {}
func (*SnapshotData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{6}
}

func (m *SnapshotData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotData.Unmarshal(m, b)
}
func (m *SnapshotData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotData.Marshal(b, m, deterministic)
}
func (m *SnapshotData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotData.Merge(m, src)
}
func (m *SnapshotData) XXX_Size() int {
	return xxx_messageInfo_SnapshotData.Size(m)
}
func (m *SnapshotData) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotData.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotData proto.InternalMessageInfo

type isSnapshotData_Data interface {
	isSnapshotData_Data()
}

type SnapshotData_KvData struct {
	KvData *Data `protobuf:"bytes,1,opt,name=kv_data,json=kvData,proto3,oneof"`
}

type SnapshotData_Metadata struct {
	Metadata *SnapshotMetadata `protobuf:"bytes,2,opt,name=metadata,proto3,oneof"`
}

func (*SnapshotData_KvData) isSnapshotData_Data() {}

func (*SnapshotData_Metadata) isSnapshotData_Data() {}

func (m *SnapshotData) GetData() isSnapshotData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SnapshotData) GetKvData() *Data {
	if x, ok := m.GetData().(*SnapshotData_KvData); ok {
		return x.KvData
	}
	return nil
}

func (m *SnapshotData) GetMetadata() *SnapshotMetadata {
	if x, ok := m.GetData().(*SnapshotData_Metadata); ok {
		return x.Metadata
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SnapshotData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SnapshotData_OneofMarshaler, _SnapshotData_OneofUnmarshaler, _SnapshotData_OneofSizer, []interface{}{
		(*SnapshotData_KvData)(nil),
		(*SnapshotData_Metadata)(nil),
	}
}

func _SnapshotData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SnapshotData)
	// data
	switch x := m.Data.(type) {
	case *SnapshotData_KvData:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KvData); err != nil {
			return err
		}
	case *SnapshotData_Metadata:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Metadata); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SnapshotData.Data has unexpected type %T", x)
	}
	return nil
}

func _SnapshotData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SnapshotData)
	switch tag {
	case 1: // data.kv_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Data)
		err := b.DecodeMessage(msg)
		m.Data = &SnapshotData_KvData{msg}
		return true, err
	case 2: // data.metadata
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnapshotMetadata)
		err := b.DecodeMessage(msg)
		m.Data = &SnapshotData_Metadata{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SnapshotData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SnapshotData)
	// data
	switch x := m.Data.(type) {
	case *SnapshotData_KvData:
		s := proto.Size(x.KvData)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SnapshotData_Metadata:
		s := proto.Size(x.Metadata)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// InstallSnapshotReply is a reply to InstallSnapshot call involving
// snapshot transfer. The transfer is considered successful if the
// commit index is greater than or equal to the one in metadata sent
type InstallSnapshotReply struct {
	SenderInfo           *NodeInfo `protobuf:"bytes,1,opt,name=sender_info,json=senderInfo,proto3" json:"sender_info,omitempty"`
	LatestCommitIndex    uint64    `protobuf:"varint,2,opt,name=latest_commit_index,json=latestCommitIndex,proto3" json:"latest_commit_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *InstallSnapshotReply) Reset()         { *m = InstallSnapshotReply{} }
func (m *InstallSnapshotReply) String() string { return proto.CompactTextString(m) }
func (*InstallSnapshotReply) ProtoMessage()    {}
func (*InstallSnapshotReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{7}
}

func (m *InstallSnapshotReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallSnapshotReply.Unmarshal(m, b)
}
func (m *InstallSnapshotReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallSnapshotReply.Marshal(b, m, deterministic)
}
func (m *InstallSnapshotReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallSnapshotReply.Merge(m, src)
}
func (m *InstallSnapshotReply) XXX_Size() int {
	return xxx_messageInfo_InstallSnapshotReply.Size(m)
}
func (m *InstallSnapshotReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallSnapshotReply.DiscardUnknown(m)
}

var xxx_messageInfo_InstallSnapshotReply proto.InternalMessageInfo

func (m *InstallSnapshotReply) GetSenderInfo() *NodeInfo {
	if m != nil {
		return m.SenderInfo
	}
	return nil
}

func (m *InstallSnapshotReply) GetLatestCommitIndex() uint64 {
	if m != nil {
		return m.LatestCommitIndex
	}
	return 0
}

// OpEntry represents the operational log entry that is created as
// part of the user request to add or remove a key-value pair.
type OpEntry struct {
	TermId uint64 `protobuf:"varint,1,opt,name=term_id,json=termId,proto3" json:"term_id,omitempty"`
	// Types that are valid to be assigned to Entry:
	//	*OpEntry_Upsert
	//	*OpEntry_Delete
	Entry                isOpEntry_Entry `protobuf_oneof:"entry"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *OpEntry) Reset()         { *m = OpEntry{} }
func (m *OpEntry) String() string { return proto.CompactTextString(m) }
func (*OpEntry) ProtoMessage()    {}
func (*OpEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{8}
}

func (m *OpEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpEntry.Unmarshal(m, b)
}
func (m *OpEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpEntry.Marshal(b, m, deterministic)
}
func (m *OpEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpEntry.Merge(m, src)
}
func (m *OpEntry) XXX_Size() int {
	return xxx_messageInfo_OpEntry.Size(m)
}
func (m *OpEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_OpEntry.DiscardUnknown(m)
}

var xxx_messageInfo_OpEntry proto.InternalMessageInfo

func (m *OpEntry) GetTermId() uint64 {
	if m != nil {
		return m.TermId
	}
	return 0
}

type isOpEntry_Entry interface {
	isOpEntry_Entry()
}

type OpEntry_Upsert struct {
	Upsert *UpsertOp `protobuf:"bytes,2,opt,name=upsert,proto3,oneof"`
}

type OpEntry_Delete struct {
	Delete *DeleteOp `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

func (*OpEntry_Upsert) isOpEntry_Entry() {}

func (*OpEntry_Delete) isOpEntry_Entry() {}

func (m *OpEntry) GetEntry() isOpEntry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *OpEntry) GetUpsert() *UpsertOp {
	if x, ok := m.GetEntry().(*OpEntry_Upsert); ok {
		return x.Upsert
	}
	return nil
}

func (m *OpEntry) GetDelete() *DeleteOp {
	if x, ok := m.GetEntry().(*OpEntry_Delete); ok {
		return x.Delete
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OpEntry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OpEntry_OneofMarshaler, _OpEntry_OneofUnmarshaler, _OpEntry_OneofSizer, []interface{}{
		(*OpEntry_Upsert)(nil),
		(*OpEntry_Delete)(nil),
	}
}

func _OpEntry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OpEntry)
	// entry
	switch x := m.Entry.(type) {
	case *OpEntry_Upsert:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Upsert); err != nil {
			return err
		}
	case *OpEntry_Delete:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Delete); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OpEntry.Entry has unexpected type %T", x)
	}
	return nil
}

func _OpEntry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OpEntry)
	switch tag {
	case 2: // entry.upsert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpsertOp)
		err := b.DecodeMessage(msg)
		m.Entry = &OpEntry_Upsert{msg}
		return true, err
	case 3: // entry.delete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteOp)
		err := b.DecodeMessage(msg)
		m.Entry = &OpEntry_Delete{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OpEntry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OpEntry)
	// entry
	switch x := m.Entry.(type) {
	case *OpEntry_Upsert:
		s := proto.Size(x.Upsert)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpEntry_Delete:
		s := proto.Size(x.Delete)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UpsertOp struct {
	Data                 *Data    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpsertOp) Reset()         { *m = UpsertOp{} }
func (m *UpsertOp) String() string { return proto.CompactTextString(m) }
func (*UpsertOp) ProtoMessage()    {}
func (*UpsertOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{9}
}

func (m *UpsertOp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpsertOp.Unmarshal(m, b)
}
func (m *UpsertOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpsertOp.Marshal(b, m, deterministic)
}
func (m *UpsertOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertOp.Merge(m, src)
}
func (m *UpsertOp) XXX_Size() int {
	return xxx_messageInfo_UpsertOp.Size(m)
}
func (m *UpsertOp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertOp.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertOp proto.InternalMessageInfo

func (m *UpsertOp) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeleteOp struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOp) Reset()         { *m = DeleteOp{} }
func (m *DeleteOp) String() string { return proto.CompactTextString(m) }
func (*DeleteOp) ProtoMessage()    {}
func (*DeleteOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{10}
}

func (m *DeleteOp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteOp.Unmarshal(m, b)
}
func (m *DeleteOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteOp.Marshal(b, m, deterministic)
}
func (m *DeleteOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOp.Merge(m, src)
}
func (m *DeleteOp) XXX_Size() int {
	return xxx_messageInfo_DeleteOp.Size(m)
}
func (m *DeleteOp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOp proto.InternalMessageInfo

func (m *DeleteOp) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// Data represents a single key-value pair
type Data struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{11}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Data) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// OpEntryMetadata represents the metadata associated with each
// entry of operational log. That is, term_id and index in log
type OpEntryMetadata struct {
	TermId               uint64   `protobuf:"varint,1,opt,name=term_id,json=termId,proto3" json:"term_id,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpEntryMetadata) Reset()         { *m = OpEntryMetadata{} }
func (m *OpEntryMetadata) String() string { return proto.CompactTextString(m) }
func (*OpEntryMetadata) ProtoMessage()    {}
func (*OpEntryMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{12}
}

func (m *OpEntryMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpEntryMetadata.Unmarshal(m, b)
}
func (m *OpEntryMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpEntryMetadata.Marshal(b, m, deterministic)
}
func (m *OpEntryMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpEntryMetadata.Merge(m, src)
}
func (m *OpEntryMetadata) XXX_Size() int {
	return xxx_messageInfo_OpEntryMetadata.Size(m)
}
func (m *OpEntryMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_OpEntryMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_OpEntryMetadata proto.InternalMessageInfo

func (m *OpEntryMetadata) GetTermId() uint64 {
	if m != nil {
		return m.TermId
	}
	return 0
}

func (m *OpEntryMetadata) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// SnapshotMetadata represents the metadata associated with the
// snapshot. It is sent in the end of snapshot transfer to indicate
// the end of snapshot transfer and telling the remote node to
// switch epoch.
type SnapshotMetadata struct {
	LastEntryMetadata    *OpEntryMetadata `protobuf:"bytes,1,opt,name=last_entry_metadata,json=lastEntryMetadata,proto3" json:"last_entry_metadata,omitempty"`
	LastEntry            *OpEntry         `protobuf:"bytes,2,opt,name=last_entry,json=lastEntry,proto3" json:"last_entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SnapshotMetadata) Reset()         { *m = SnapshotMetadata{} }
func (m *SnapshotMetadata) String() string { return proto.CompactTextString(m) }
func (*SnapshotMetadata) ProtoMessage()    {}
func (*SnapshotMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{13}
}

func (m *SnapshotMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnapshotMetadata.Unmarshal(m, b)
}
func (m *SnapshotMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnapshotMetadata.Marshal(b, m, deterministic)
}
func (m *SnapshotMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotMetadata.Merge(m, src)
}
func (m *SnapshotMetadata) XXX_Size() int {
	return xxx_messageInfo_SnapshotMetadata.Size(m)
}
func (m *SnapshotMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotMetadata proto.InternalMessageInfo

func (m *SnapshotMetadata) GetLastEntryMetadata() *OpEntryMetadata {
	if m != nil {
		return m.LastEntryMetadata
	}
	return nil
}

func (m *SnapshotMetadata) GetLastEntry() *OpEntry {
	if m != nil {
		return m.LastEntry
	}
	return nil
}

// NodeInfo represents the information of the node like its identifier
// in the cluster along with the term it is currently in.
type NodeInfo struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	TermId               uint64   `protobuf:"varint,2,opt,name=term_id,json=termId,proto3" json:"term_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{14}
}

func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *NodeInfo) GetTermId() uint64 {
	if m != nil {
		return m.TermId
	}
	return 0
}

func init() {
	proto.RegisterType((*GrantVoteRequest)(nil), "raftpb.GrantVoteRequest")
	proto.RegisterType((*GrantVoteReply)(nil), "raftpb.GrantVoteReply")
	proto.RegisterType((*AppendEntryRequest)(nil), "raftpb.AppendEntryRequest")
	proto.RegisterType((*AppendEntryReply)(nil), "raftpb.AppendEntryReply")
	proto.RegisterType((*HeartbeatRequest)(nil), "raftpb.HeartbeatRequest")
	proto.RegisterType((*HeartbeatReply)(nil), "raftpb.HeartbeatReply")
	proto.RegisterType((*SnapshotData)(nil), "raftpb.SnapshotData")
	proto.RegisterType((*InstallSnapshotReply)(nil), "raftpb.InstallSnapshotReply")
	proto.RegisterType((*OpEntry)(nil), "raftpb.OpEntry")
	proto.RegisterType((*UpsertOp)(nil), "raftpb.UpsertOp")
	proto.RegisterType((*DeleteOp)(nil), "raftpb.DeleteOp")
	proto.RegisterType((*Data)(nil), "raftpb.Data")
	proto.RegisterType((*OpEntryMetadata)(nil), "raftpb.OpEntryMetadata")
	proto.RegisterType((*SnapshotMetadata)(nil), "raftpb.SnapshotMetadata")
	proto.RegisterType((*NodeInfo)(nil), "raftpb.NodeInfo")
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor_b042552c306ae59b) }

var fileDescriptor_b042552c306ae59b = []byte{
	// 691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x6e, 0x13, 0x3f,
	0x10, 0xce, 0xb6, 0xe9, 0x66, 0x33, 0x89, 0xda, 0xfd, 0xf9, 0x17, 0xd1, 0x28, 0xea, 0x21, 0xf8,
	0x42, 0x84, 0xaa, 0x48, 0x14, 0x89, 0x13, 0x12, 0xb4, 0xb4, 0x6a, 0x23, 0x01, 0x45, 0xe6, 0xcf,
	0x75, 0xe5, 0x66, 0x27, 0x10, 0x75, 0xb3, 0xbb, 0x78, 0x9d, 0x40, 0xce, 0x1c, 0x91, 0x78, 0x0a,
	0x9e, 0x8b, 0x67, 0x41, 0xb6, 0xe3, 0xcd, 0x76, 0x9b, 0x20, 0x35, 0xbd, 0xd9, 0x33, 0x9f, 0xc7,
	0xf3, 0x7d, 0x9e, 0x19, 0x03, 0x08, 0x3e, 0x92, 0xfd, 0x54, 0x24, 0x32, 0x21, 0xae, 0x5a, 0xa7,
	0x57, 0xf4, 0x97, 0x03, 0xfe, 0xb9, 0xe0, 0xb1, 0xfc, 0x94, 0x48, 0x64, 0xf8, 0x75, 0x8a, 0x99,
	0x24, 0x4f, 0xa0, 0x91, 0x61, 0x1c, 0xa2, 0x08, 0xc6, 0xf1, 0x28, 0x69, 0x3b, 0x5d, 0xa7, 0xd7,
	0x38, 0xf2, 0xfb, 0xe6, 0x48, 0xff, 0x6d, 0x12, 0xe2, 0x20, 0x1e, 0x25, 0x0c, 0x0c, 0x48, 0xad,
	0xc9, 0x39, 0xfc, 0x1f, 0xf1, 0x4c, 0x06, 0x18, 0x4b, 0x31, 0x0f, 0x26, 0x28, 0x79, 0xc8, 0x25,
	0x6f, 0x6f, 0xe9, 0xa3, 0xfb, 0xf6, 0xe8, 0x65, 0x7a, 0xa6, 0xfc, 0x6f, 0x16, 0x6e, 0xf6, 0x9f,
	0x3a, 0x73, 0xc3, 0x44, 0x47, 0xb0, 0x5b, 0xc8, 0x27, 0x8d, 0xe6, 0x9b, 0x64, 0xf3, 0x10, 0x9a,
	0xb3, 0x44, 0x62, 0xf0, 0x59, 0x45, 0xc2, 0x50, 0xa7, 0xe1, 0xb1, 0x86, 0xb2, 0x9d, 0x1b, 0x13,
	0xfd, 0xe3, 0x00, 0x39, 0x4e, 0x53, 0x8c, 0x43, 0x7d, 0xff, 0x3d, 0xa8, 0x1f, 0x42, 0x7d, 0x38,
	0x15, 0x86, 0xf9, 0x82, 0xf0, 0x5e, 0x89, 0x30, 0xf3, 0x86, 0x53, 0xa1, 0x57, 0xa4, 0x0b, 0xcd,
	0x54, 0xe0, 0x2c, 0x90, 0x28, 0x26, 0xc1, 0x38, 0x6c, 0x6f, 0x77, 0x9d, 0x5e, 0x95, 0x81, 0xb2,
	0x7d, 0x40, 0x31, 0x19, 0x84, 0xe4, 0x0c, 0x48, 0x1e, 0x6f, 0xa9, 0x64, 0xf5, 0xdf, 0x4a, 0xfa,
	0xf6, 0x82, 0x5c, 0x48, 0x0e, 0xfe, 0x0d, 0x7e, 0x1b, 0x4a, 0xd9, 0x01, 0x8f, 0xeb, 0x30, 0xb9,
	0x8c, 0xf9, 0x9e, 0x4e, 0xc1, 0xbf, 0x40, 0x2e, 0xe4, 0x15, 0x72, 0x79, 0x0f, 0x01, 0xfb, 0xaa,
	0x76, 0x24, 0x66, 0x32, 0x18, 0x26, 0x93, 0xc9, 0x58, 0x06, 0xe3, 0x38, 0xc4, 0xef, 0xfa, 0xb6,
	0xaa, 0x2a, 0x11, 0xe5, 0x7a, 0xa5, 0x3d, 0x03, 0xe5, 0xa0, 0x13, 0xd8, 0x2d, 0x5c, 0xbb, 0x21,
	0xaf, 0x1e, 0xf8, 0x7c, 0x38, 0xc4, 0x54, 0x06, 0x3c, 0x0b, 0x22, 0xe4, 0x21, 0x8a, 0x05, 0xbf,
	0x5d, 0x63, 0x3f, 0xce, 0x5e, 0x6b, 0x2b, 0xfd, 0x06, 0xcd, 0xf7, 0x31, 0x4f, 0xb3, 0x2f, 0x89,
	0x3c, 0xe5, 0x92, 0x93, 0x47, 0x50, 0xbb, 0x9e, 0x05, 0xfa, 0x51, 0xcc, 0x45, 0x4d, 0x7b, 0x91,
	0x72, 0x5f, 0x54, 0x98, 0x7b, 0x3d, 0xd3, 0xc0, 0x67, 0xe0, 0x95, 0x1a, 0xa1, 0x6d, 0x91, 0x36,
	0xa0, 0x7d, 0xad, 0x8b, 0x0a, 0xcb, 0xb1, 0x27, 0x2e, 0x54, 0xf5, 0x0b, 0xce, 0xa1, 0x35, 0x88,
	0x33, 0xc9, 0xa3, 0xc8, 0xc2, 0x37, 0x66, 0x7b, 0x57, 0x89, 0x7f, 0x38, 0x50, 0x5b, 0x94, 0x18,
	0xd9, 0x87, 0x9a, 0x2d, 0x56, 0x47, 0xe3, 0x5d, 0x69, 0x0a, 0xf5, 0x31, 0xb8, 0xd3, 0x34, 0x43,
	0x21, 0x17, 0xec, 0xf2, 0x14, 0x3e, 0x6a, 0xeb, 0x65, 0xaa, 0xb4, 0x30, 0x08, 0x85, 0x0d, 0x31,
	0x42, 0x89, 0xba, 0xe0, 0x0b, 0xd8, 0x53, 0x6d, 0x35, 0x58, 0x83, 0x38, 0xa9, 0xc1, 0x8e, 0x2e,
	0x7e, 0x7a, 0x08, 0x9e, 0x0d, 0x45, 0xba, 0x46, 0x94, 0x55, 0x92, 0x33, 0x23, 0xd7, 0x01, 0x78,
	0x36, 0x18, 0xf1, 0x61, 0xfb, 0x1a, 0xe7, 0x1a, 0x5c, 0x67, 0x6a, 0x49, 0xfb, 0x50, 0xd5, 0x8f,
	0x72, 0xcb, 0x43, 0x5a, 0xb0, 0x33, 0xe3, 0xd1, 0x14, 0x35, 0x8b, 0x3a, 0x33, 0x1b, 0xfa, 0x12,
	0xf6, 0x4a, 0x3d, 0xb6, 0x5e, 0x88, 0x16, 0xec, 0x14, 0xf5, 0x34, 0x1b, 0xfa, 0xd3, 0x01, 0xbf,
	0xfc, 0xce, 0xeb, 0xe6, 0xa4, 0x73, 0xd7, 0x39, 0x49, 0xfa, 0x00, 0xcb, 0x40, 0xeb, 0xc6, 0x4e,
	0x3d, 0x3f, 0x47, 0x9f, 0x83, 0x67, 0x2b, 0x43, 0x11, 0x89, 0x93, 0x10, 0x2d, 0x91, 0x3a, 0x73,
	0xd5, 0x76, 0x10, 0x16, 0x19, 0x6e, 0x15, 0x19, 0x1e, 0xfd, 0xde, 0x82, 0x26, 0xe3, 0x23, 0xf9,
	0x4e, 0x7d, 0x1e, 0xc3, 0x24, 0x22, 0xc7, 0xd0, 0x58, 0x74, 0xbc, 0x1a, 0xd4, 0x24, 0x2f, 0xec,
	0xf2, 0x5f, 0xd2, 0x79, 0xb0, 0xc2, 0x93, 0x46, 0x73, 0x5a, 0x21, 0x67, 0xd0, 0x28, 0x0c, 0x28,
	0xd2, 0xb1, 0xc0, 0xdb, 0x53, 0xb9, 0xd3, 0x5e, 0xe9, 0x33, 0x61, 0x5e, 0x40, 0x3d, 0x9f, 0x06,
	0xcb, 0x3c, 0xca, 0x73, 0x69, 0x99, 0xc7, 0xcd, 0xd1, 0x41, 0x2b, 0x64, 0x00, 0x7b, 0xa5, 0x36,
	0x23, 0xad, 0x72, 0x9f, 0xaa, 0xd2, 0xe9, 0x1c, 0x58, 0xeb, 0xaa, 0xae, 0xa4, 0x95, 0x9e, 0x73,
	0xe5, 0xea, 0xcf, 0xf5, 0xe9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xca, 0x1d, 0x82, 0xf6, 0x6a,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftProtocolClient is the client API for RaftProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftProtocolClient interface {
	// RequestVote requests vote from other nodes in the cluster.
	// This is used during leader election phase.
	RequestVote(ctx context.Context, in *GrantVoteRequest, opts ...grpc.CallOption) (*GrantVoteReply, error)
	// AppendEntry is used by the leader to attempt to replicate a
	// log entry to its followers logs
	AppendEntry(ctx context.Context, in *AppendEntryRequest, opts ...grpc.CallOption) (*AppendEntryReply, error)
	// Heartbeat is used by the leader to send heartbeats to followers
	// in the cluster and to establish authority over them
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error)
	// InstallSnapshot is used by the leader to transfer the snapshot
	// to a follower node to fast forward its logs.
	InstallSnapshot(ctx context.Context, opts ...grpc.CallOption) (RaftProtocol_InstallSnapshotClient, error)
}

type raftProtocolClient struct {
	cc *grpc.ClientConn
}

func NewRaftProtocolClient(cc *grpc.ClientConn) RaftProtocolClient {
	return &raftProtocolClient{cc}
}

func (c *raftProtocolClient) RequestVote(ctx context.Context, in *GrantVoteRequest, opts ...grpc.CallOption) (*GrantVoteReply, error) {
	out := new(GrantVoteReply)
	err := c.cc.Invoke(ctx, "/raftpb.RaftProtocol/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftProtocolClient) AppendEntry(ctx context.Context, in *AppendEntryRequest, opts ...grpc.CallOption) (*AppendEntryReply, error) {
	out := new(AppendEntryReply)
	err := c.cc.Invoke(ctx, "/raftpb.RaftProtocol/AppendEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftProtocolClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error) {
	out := new(HeartbeatReply)
	err := c.cc.Invoke(ctx, "/raftpb.RaftProtocol/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftProtocolClient) InstallSnapshot(ctx context.Context, opts ...grpc.CallOption) (RaftProtocol_InstallSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RaftProtocol_serviceDesc.Streams[0], "/raftpb.RaftProtocol/InstallSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftProtocolInstallSnapshotClient{stream}
	return x, nil
}

type RaftProtocol_InstallSnapshotClient interface {
	Send(*SnapshotData) error
	CloseAndRecv() (*InstallSnapshotReply, error)
	grpc.ClientStream
}

type raftProtocolInstallSnapshotClient struct {
	grpc.ClientStream
}

func (x *raftProtocolInstallSnapshotClient) Send(m *SnapshotData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftProtocolInstallSnapshotClient) CloseAndRecv() (*InstallSnapshotReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InstallSnapshotReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RaftProtocolServer is the server API for RaftProtocol service.
type RaftProtocolServer interface {
	// RequestVote requests vote from other nodes in the cluster.
	// This is used during leader election phase.
	RequestVote(context.Context, *GrantVoteRequest) (*GrantVoteReply, error)
	// AppendEntry is used by the leader to attempt to replicate a
	// log entry to its followers logs
	AppendEntry(context.Context, *AppendEntryRequest) (*AppendEntryReply, error)
	// Heartbeat is used by the leader to send heartbeats to followers
	// in the cluster and to establish authority over them
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatReply, error)
	// InstallSnapshot is used by the leader to transfer the snapshot
	// to a follower node to fast forward its logs.
	InstallSnapshot(RaftProtocol_InstallSnapshotServer) error
}

func RegisterRaftProtocolServer(s *grpc.Server, srv RaftProtocolServer) {
	s.RegisterService(&_RaftProtocol_serviceDesc, srv)
}

func _RaftProtocol_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftProtocolServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftpb.RaftProtocol/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftProtocolServer).RequestVote(ctx, req.(*GrantVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftProtocol_AppendEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftProtocolServer).AppendEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftpb.RaftProtocol/AppendEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftProtocolServer).AppendEntry(ctx, req.(*AppendEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftProtocol_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftProtocolServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raftpb.RaftProtocol/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftProtocolServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftProtocol_InstallSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftProtocolServer).InstallSnapshot(&raftProtocolInstallSnapshotServer{stream})
}

type RaftProtocol_InstallSnapshotServer interface {
	SendAndClose(*InstallSnapshotReply) error
	Recv() (*SnapshotData, error)
	grpc.ServerStream
}

type raftProtocolInstallSnapshotServer struct {
	grpc.ServerStream
}

func (x *raftProtocolInstallSnapshotServer) SendAndClose(m *InstallSnapshotReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftProtocolInstallSnapshotServer) Recv() (*SnapshotData, error) {
	m := new(SnapshotData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RaftProtocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raftpb.RaftProtocol",
	HandlerType: (*RaftProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _RaftProtocol_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntry",
			Handler:    _RaftProtocol_AppendEntry_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _RaftProtocol_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstallSnapshot",
			Handler:       _RaftProtocol_InstallSnapshot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "raft.proto",
}
